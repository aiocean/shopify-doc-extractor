// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: extractor/v1/extractor.proto

package extractorv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/aiocean/shopify-doc-extractor/gen/extractor/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ExtractorServiceName is the fully-qualified name of the ExtractorService service.
	ExtractorServiceName = "extractor.v1.ExtractorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ExtractorServiceExtractProcedure is the fully-qualified name of the ExtractorService's Extract
	// RPC.
	ExtractorServiceExtractProcedure = "/extractor.v1.ExtractorService/Extract"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	extractorServiceServiceDescriptor       = v1.File_extractor_v1_extractor_proto.Services().ByName("ExtractorService")
	extractorServiceExtractMethodDescriptor = extractorServiceServiceDescriptor.Methods().ByName("Extract")
)

// ExtractorServiceClient is a client for the extractor.v1.ExtractorService service.
type ExtractorServiceClient interface {
	Extract(context.Context, *connect.Request[v1.ExtractRequest]) (*connect.Response[v1.ExtractResponse], error)
}

// NewExtractorServiceClient constructs a client for the extractor.v1.ExtractorService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExtractorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ExtractorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &extractorServiceClient{
		extract: connect.NewClient[v1.ExtractRequest, v1.ExtractResponse](
			httpClient,
			baseURL+ExtractorServiceExtractProcedure,
			connect.WithSchema(extractorServiceExtractMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// extractorServiceClient implements ExtractorServiceClient.
type extractorServiceClient struct {
	extract *connect.Client[v1.ExtractRequest, v1.ExtractResponse]
}

// Extract calls extractor.v1.ExtractorService.Extract.
func (c *extractorServiceClient) Extract(ctx context.Context, req *connect.Request[v1.ExtractRequest]) (*connect.Response[v1.ExtractResponse], error) {
	return c.extract.CallUnary(ctx, req)
}

// ExtractorServiceHandler is an implementation of the extractor.v1.ExtractorService service.
type ExtractorServiceHandler interface {
	Extract(context.Context, *connect.Request[v1.ExtractRequest]) (*connect.Response[v1.ExtractResponse], error)
}

// NewExtractorServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExtractorServiceHandler(svc ExtractorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	extractorServiceExtractHandler := connect.NewUnaryHandler(
		ExtractorServiceExtractProcedure,
		svc.Extract,
		connect.WithSchema(extractorServiceExtractMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/extractor.v1.ExtractorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ExtractorServiceExtractProcedure:
			extractorServiceExtractHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedExtractorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedExtractorServiceHandler struct{}

func (UnimplementedExtractorServiceHandler) Extract(context.Context, *connect.Request[v1.ExtractRequest]) (*connect.Response[v1.ExtractResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("extractor.v1.ExtractorService.Extract is not implemented"))
}
