// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: indexer/v1/indexer.proto

package indexerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/aiocean/shopify-doc-extractor/gen/indexer/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IndexerServiceName is the fully-qualified name of the IndexerService service.
	IndexerServiceName = "indexer.v1.IndexerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IndexerServiceIndexProcedure is the fully-qualified name of the IndexerService's Index RPC.
	IndexerServiceIndexProcedure = "/indexer.v1.IndexerService/Index"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	indexerServiceServiceDescriptor     = v1.File_indexer_v1_indexer_proto.Services().ByName("IndexerService")
	indexerServiceIndexMethodDescriptor = indexerServiceServiceDescriptor.Methods().ByName("Index")
)

// IndexerServiceClient is a client for the indexer.v1.IndexerService service.
type IndexerServiceClient interface {
	Index(context.Context, *connect.Request[v1.IndexRequest]) (*connect.Response[v1.IndexResponse], error)
}

// NewIndexerServiceClient constructs a client for the indexer.v1.IndexerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIndexerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IndexerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &indexerServiceClient{
		index: connect.NewClient[v1.IndexRequest, v1.IndexResponse](
			httpClient,
			baseURL+IndexerServiceIndexProcedure,
			connect.WithSchema(indexerServiceIndexMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// indexerServiceClient implements IndexerServiceClient.
type indexerServiceClient struct {
	index *connect.Client[v1.IndexRequest, v1.IndexResponse]
}

// Index calls indexer.v1.IndexerService.Index.
func (c *indexerServiceClient) Index(ctx context.Context, req *connect.Request[v1.IndexRequest]) (*connect.Response[v1.IndexResponse], error) {
	return c.index.CallUnary(ctx, req)
}

// IndexerServiceHandler is an implementation of the indexer.v1.IndexerService service.
type IndexerServiceHandler interface {
	Index(context.Context, *connect.Request[v1.IndexRequest]) (*connect.Response[v1.IndexResponse], error)
}

// NewIndexerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIndexerServiceHandler(svc IndexerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	indexerServiceIndexHandler := connect.NewUnaryHandler(
		IndexerServiceIndexProcedure,
		svc.Index,
		connect.WithSchema(indexerServiceIndexMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/indexer.v1.IndexerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IndexerServiceIndexProcedure:
			indexerServiceIndexHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIndexerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIndexerServiceHandler struct{}

func (UnimplementedIndexerServiceHandler) Index(context.Context, *connect.Request[v1.IndexRequest]) (*connect.Response[v1.IndexResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("indexer.v1.IndexerService.Index is not implemented"))
}
